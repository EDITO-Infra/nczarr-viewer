Metadata-Version: 2.4
Name: dash_nczarr_viewer
Version: 0.1.0
Summary: A Simple Geo NetCDF and Zarr Dataset Viewing App
Author-email: Samuel Fooks <samuel.fooks@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/samuelfooks/dash_nczarr_viewer
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: dash
Requires-Dist: dash-bootstrap-components
Requires-Dist: dash-core-components
Requires-Dist: dash-html-components
Requires-Dist: xarray
Requires-Dist: plotly
Requires-Dist: zarr
Requires-Dist: aiohttp
Requires-Dist: fsspec
Requires-Dist: cartopy
Requires-Dist: netCDF4
Requires-Dist: leafmap
Requires-Dist: folium
Requires-Dist: copernicusmarine
Requires-Dist: pyproj>=3.7.1
Requires-Dist: pip>=25.2
Requires-Dist: dash-leaflet>=1.0.15
Requires-Dist: matplotlib>=3.10.1
Requires-Dist: pillow>=11.2.1
Dynamic: license-file

# Dash NCZarr Viewer

### A Simple Geo NetCDF and Zarr Dataset Viewing App

This application allows you to view local NetCDF files or online Zarr files.

## Quick Start (Local Development)

### Option 1: Using the run script (Recommended)
```bash
# Install dependencies
pip install -r requirements.txt

# Run the viewer
python run.py
```

### Option 2: Using uv (if you have uv installed)
```bash
# Install dependencies
uv sync

# Run the viewer
python run.py
```

### Option 3: Install as a package
```bash
# Install in development mode
pip install -e .

# Run the viewer
python run.py
```

The viewer will be available at http://localhost:8050

## Development

### Project Structure
```
dash-nczarr-viewer/
├── src/                    # Source code
│   ├── zarr_data_viewer.py    # Main application
│   ├── variables.py           # Variable selection logic
│   ├── dimension.py           # Dimension handling
│   ├── data.py               # Data display and plotting
│   └── layout_manager.py     # UI layout management
├── run.py                  # Quick local runner
├── requirements.txt         # Python dependencies
├── pyproject.toml          # Project configuration
└── Dockerfile              # Docker configuration
```

### Making Changes
1. Edit files in the `src/` directory
2. Run `python run.py` to test your changes
3. The app will automatically reload when you save changes (in debug mode) 

## Features

- **Variable Selection**: Displays all available variables for selection.
- **Dimension Filtering**: Allows selection of dimensions (latitude and longitude must be available).
- **Array Selection**: Choose values from dimensions to select the array you need to view.
- **Quick Statistics**: Calculate Max, Min, Mean, Median, and Standard Deviation for the selected array.
- **Data Plotting**: Plot data using Matplotlib and Cartopy.
- **CMEMS Support**: Automatically detects CMEMS URLs and uses the Copernicus Marine Toolbox for optimal data access.

### Requirements

CMEMS support requires the `copernicusmarine` package, which is included in the project dependencies.

## Usage

### Local Development vs Docker

- **Local Development**: Use the quick start methods above for development, testing, and when you want to modify the code
- **Docker**: Use Docker for production deployment or when you want a consistent environment

### Running with a Local NetCDF File

1. Place your NetCDF file (ex 'Water_body_chlorophyll-a.nc') in a folder named `myfiles`.
2. Run the following Docker command:
    ```bash
    docker run -v $(pwd)/myfiles:/app/myfiles -p 8050:8050 samfooks/zarrdashapp:latest /app/myfiles/Water_body_chlorophyll-a.nc
    ```

### Running with an Online Zarr File

Run the following Docker command:
```bash
docker run -it -p 8050:8050 samfooks/zarr-netcdf-viewer:latest https://s3.waw3-1.cloudferro.com/mdl-arco-geo-041/arco/NWSHELF_ANALYSISFORECAST_BGC_004_002/cmems_mod_nws_bgc_anfc_0.027deg-3D_P1D-m_202311/geoChunked.zarr
```

### Running with a NetCDF stored on s3

If your NetCDF is stored on an s3 bucket, you can add '#mode=bytes' to the end of the link and it can be used.
For example a NetCDF stored on your personal s3 storage that is publicly viewable.

'https://minio.lab.dive.edito.eu/oidc-YOURUSERNAME/folder/mynetcdf.nc#mode=bytes'
```bash
docker run -it -p 8050:8050 samfooks/zarr-netcdf-viewer:latest https://minio.lab.dive.edito.eu/oidc-YOURUSERNAME/folder/mynetcdf.nc#mode=bytes
```
